# server/Bot_poll.py
# --- Telegram Bot + Flask server (polling architecture) ---
import os, time, threading, sqlite3, base64, io, json
from flask import Flask, request, jsonify
from telebot import TeleBot, types
from dotenv import load_dotenv

# ---------------- CONFIG ----------------
load_dotenv()
TOKEN = os.getenv("TOKEN")
if not TOKEN:
    print("‚ùå ERROR: Set TOKEN in .env")
    exit(1)
DB_PATH = os.path.join(os.path.dirname(__file__), "data.db")
API_PORT = int(os.getenv("API_PORT", "5000"))

# ---------------- DATABASE ----------------
def get_conn():
    conn = sqlite3.connect(DB_PATH, check_same_thread=False)
    conn.row_factory = sqlite3.Row
    return conn

def init_db():
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("""CREATE TABLE IF NOT EXISTS users (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        telegram_id INTEGER UNIQUE,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS computers (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        computer_hash TEXT UNIQUE,
        last_seen DATETIME,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP
    )""")
    cur.execute("""CREATE TABLE IF NOT EXISTS commands (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        computer_hash TEXT,
        command TEXT,
        payload TEXT,
        status TEXT DEFAULT 'pending',
        result TEXT,
        created_at DATETIME DEFAULT CURRENT_TIMESTAMP,
        updated_at DATETIME
    )""")
    conn.commit()
    conn.close()

# ---------------- FLASK API ----------------
app = Flask(__name__)

@app.route("/poll", methods=["POST"])
def poll():
    """Agent polls with its computer_hash"""
    data = request.json or {}
    ch = data.get("computer_hash")
    if not ch:
        return jsonify({"success": False, "message": "no computer_hash"}), 400

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO computers (computer_hash, last_seen) VALUES (?, datetime('now'))", (ch,))
    cur.execute("UPDATE computers SET last_seen = datetime('now') WHERE computer_hash = ?", (ch,))
    cur.execute("SELECT id, command, payload FROM commands WHERE computer_hash = ? AND status = 'pending'", (ch,))
    rows = cur.fetchall()

    commands = []
    ids = []
    for r in rows:
        commands.append({"id": r["id"], "command": r["command"], "payload": r["payload"]})
        ids.append(r["id"])

    if ids:
        cur.executemany("UPDATE commands SET status='running', updated_at=datetime('now') WHERE id=?", [(i,) for i in ids])
        conn.commit()
    conn.close()
    return jsonify({"success": True, "commands": commands})

@app.route("/result", methods=["POST"])
def result():
    data = request.json or {}
    cid = data.get("id")
    status = data.get("status")
    result = data.get("result")
    if not cid:
        return jsonify({"success": False, "message": "no id"}), 400

    conn = get_conn()
    cur = conn.cursor()
    cur.execute("UPDATE commands SET status=?, result=?, updated_at=datetime('now') WHERE id=?", (status, result, cid))
    conn.commit()
    conn.close()
    return jsonify({"success": True})

# ---------------- TELEGRAM BOT ----------------
bot = TeleBot(TOKEN, parse_mode="HTML")

states = {}

def ensure_user(chat_id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("INSERT OR IGNORE INTO users (telegram_id) VALUES (?)", (chat_id,))
    conn.commit()
    conn.close()

def get_user_computers(chat_id):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("SELECT computer_hash, last_seen FROM computers ORDER BY last_seen DESC")
    rows = cur.fetchall()
    conn.close()
    return rows

# ---------------- COMMANDS ----------------
@bot.message_handler(commands=['start','help'])
def cmd_start(m):
    ensure_user(m.chat.id)
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞", "üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞", "üìÅ –§–∞–π–ª—ã")
    bot.send_message(
        m.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–¥–∫–ª—é—á–∞—Ç—å –≤–∞—à–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –∏ —É–ø—Ä–∞–≤–ª—è—Ç—å –∏–º–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:",
        reply_markup=kb
    )

# ---------- –£–°–¢–†–û–ô–°–¢–í–ê ----------
@bot.message_handler(func=lambda msg: msg.text=="üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")
def menu_devices(m):
    rows = get_user_computers(m.chat.id)
    kb = types.InlineKeyboardMarkup()
    for r in rows:
        kb.add(types.InlineKeyboardButton(f"{r['computer_hash'][:12]}... last {r['last_seen']}", callback_data=f"select:{r['computer_hash']}"))
    kb.add(types.InlineKeyboardButton("üì¶ –°–∫–∞—á–∞—Ç—å –∞–≥–µ–Ω—Ç", callback_data="download_agent"))

    if not rows:
        bot.send_message(m.chat.id, "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤.\nüëá –°–∫–∞—á–∞–π—Ç–µ –∞–≥–µ–Ω—Ç –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ –µ–≥–æ –Ω–∞ –≤–∞—à–µ–º –ü–ö:", reply_markup=kb)
    else:
        bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –∏–ª–∏ —Å–∫–∞—á–∞–π—Ç–µ –∞–≥–µ–Ω—Ç:", reply_markup=kb)

@bot.callback_query_handler(lambda c: c.data == "download_agent")
def send_agent_zip(call):
    bot.answer_callback_query(call.id)
    agent_path = "/home/dmitry/Pocket-access/agent/SystemAgent.zip"
    try:
        with open(agent_path, "rb") as f:
            bot.send_document(
                call.message.chat.id,
                f,
                visible_file_name="SystemAgent.zip",
                caption=(
                    "‚¨áÔ∏è <b>–ê–≥–µ–Ω—Ç –¥–ª—è Windows</b>\n\n"
                    "1Ô∏è‚É£ –°–∫–∞—á–∞–π—Ç–µ –∞—Ä—Ö–∏–≤ –∏ —Ä–∞—Å–ø–∞–∫—É–π—Ç–µ.\n"
                    "2Ô∏è‚É£ –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª <code>Start Agent.bat</code>.\n"
                    "3Ô∏è‚É£ –ê–≥–µ–Ω—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.\n\n"
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å —Å—é–¥–∞ –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ."
                )
            )
    except FileNotFoundError:
        bot.send_message(call.message.chat.id, "‚ö†Ô∏è –ê–≥–µ–Ω—Ç –ø–æ–∫–∞ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä.")

@bot.callback_query_handler(lambda c: c.data and c.data.startswith("select:"))
def on_select_device(call):
    ch = call.data.split(":",1)[1]
    states[call.message.chat.id] = {"computer_hash": ch}
    bot.answer_callback_query(call.id)
    bot.send_message(call.message.chat.id, f"‚úÖ –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤—ã–±—Ä–∞–Ω–æ:\n<code>{ch}</code>")

# ---------- –°–ò–°–¢–ï–ú–ê ----------
@bot.message_handler(func=lambda msg: msg.text=="üñ•Ô∏è –°–∏—Å—Ç–µ–º–∞")
def menu_system(m):
    st = states.get(m.chat.id)
    if not st:
        return bot.send_message(m.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç", "üíª –ò–Ω—Ñ–æ", "üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–°–∏—Å—Ç–µ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:", reply_markup=kb)

def add_command(ch, command, payload=""):
    conn = get_conn()
    cur = conn.cursor()
    cur.execute("INSERT INTO commands (computer_hash, command, payload) VALUES (?, ?, ?)", (ch, command, payload))
    conn.commit()
    conn.close()

@bot.message_handler(func=lambda msg: msg.text=="üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç")
def cmd_screenshot(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    add_command(st["computer_hash"], "screenshot")
    bot.send_message(m.chat.id, "üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç –∑–∞–ø—Ä–æ—à–µ–Ω.")

@bot.message_handler(func=lambda msg: msg.text=="üíª –ò–Ω—Ñ–æ")
def cmd_info(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    add_command(st["computer_hash"], "system_info")
    bot.send_message(m.chat.id, "üíª –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –∑–∞–ø—Ä–æ—à–µ–Ω–∞.")

@bot.message_handler(func=lambda msg: msg.text=="üîÑ –ü—Ä–æ—Ü–µ—Å—Å—ã")
def cmd_procs(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    add_command(st["computer_hash"], "processes")
    bot.send_message(m.chat.id, "üîÑ –°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω.")

# ---------- –§–ê–ô–õ–´ ----------
@bot.message_handler(func=lambda msg: msg.text=="üìÅ –§–∞–π–ª—ã")
def menu_files(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.add("üìÇ –°–ø–∏—Å–æ–∫", "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å", "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å", "üîô –ù–∞–∑–∞–¥")
    bot.send_message(m.chat.id, "–§–∞–π–ª–æ–≤—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:", reply_markup=kb)

@bot.message_handler(func=lambda msg: msg.text in ["üìÇ –°–ø–∏—Å–æ–∫","‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å","üóëÔ∏è –£–¥–∞–ª–∏—Ç—å"])
def ask_path(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    states[m.chat.id]["pending"] = m.text
    bot.send_message(m.chat.id, "–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä C:\\\\Users\\\\Public):")

@bot.message_handler(content_types=['document'])
def received_document(m):
    st = states.get(m.chat.id)
    if not st or not st.get("pending_upload"):
        return
    file_info = bot.get_file(m.document.file_id)
    downloaded = bot.download_file(file_info.file_path)
    st["upload_bytes"] = downloaded
    st["upload_name"] = m.document.file_name
    bot.send_message(m.chat.id, f"–§–∞–π–ª <b>{m.document.file_name}</b> –ø–æ–ª—É—á–µ–Ω. –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –Ω–∞ –ü–ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è:")

@bot.message_handler(func=lambda msg: msg.text=="‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∑–∏—Ç—å")
def upload_start(m):
    st = states.get(m.chat.id)
    if not st: return bot.send_message(m.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ.")
    st["pending_upload"] = True
    bot.send_message(m.chat.id, "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –≤ —á–∞—Ç (–∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç).")

@bot.message_handler(func=lambda msg: True)
def handle_text(m):
    st = states.get(m.chat.id)
    if not st: return
    # upload target path
    if st.get("pending_upload") and st.get("upload_bytes"):
        target = m.text.strip()
        ch = st["computer_hash"]
        b = st["upload_bytes"]
        name = st["upload_name"]
        payload_b64 = base64.b64encode(b).decode()
        payload = {"target_path": target, "name": name, "file_b64": payload_b64}
        add_command(ch, "upload", str(payload))
        bot.send_message(m.chat.id, "‚¨ÜÔ∏è –§–∞–π–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≥–µ–Ω—Ç—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.")
        st.pop("pending_upload", None)
        st.pop("upload_bytes", None)
        st.pop("upload_name", None)
        return

    pending = st.get("pending")
    if not pending:
        return
    ch = st["computer_hash"]
    path = m.text.strip()
    if pending == "üìÇ –°–ø–∏—Å–æ–∫":
        add_command(ch, "list_files", path)
        bot.send_message(m.chat.id, "üìÇ –°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –∑–∞–ø—Ä–æ—à–µ–Ω.")
    elif pending == "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å":
        add_command(ch, "download", path)
        bot.send_message(m.chat.id, "‚¨áÔ∏è –§–∞–π–ª –∑–∞–ø—Ä–æ—à–µ–Ω.")
    elif pending == "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å":
        add_command(ch, "delete", path)
        bot.send_message(m.chat.id, "üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–æ.")
    st.pop("pending", None)

# ---------- –§–û–ù: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ----------
def poll_results():
    while True:
        conn = get_conn()
        cur = conn.cursor()
        cur.execute("SELECT id, computer_hash, command, result FROM commands WHERE status IN ('done','failed')")
        rows = cur.fetchall()
        for r in rows:
            cid = r["id"]; cmd = r["command"]; res = r["result"]
            cur2 = conn.cursor()
            cur2.execute("SELECT telegram_id FROM users")
            users = cur2.fetchall()
            for u in users:
                try:
                    if cmd == "screenshot" and res:
                        img = base64.b64decode(res)
                        bot.send_photo(u["telegram_id"], img, caption=f"üì∏ –°–∫—Ä–∏–Ω—à–æ—Ç ({r['computer_hash'][:10]})")
                    elif cmd == "download" and res:
                        data = json.loads(res)
                        file_b64 = data.get("file_b64")
                        name = data.get("name","file.bin")
                        bot.send_document(u["telegram_id"], io.BytesIO(base64.b64decode(file_b64)), visible_file_name=name)
                    else:
                        bot.send_message(u["telegram_id"], f"‚úÖ {cmd} ({r['computer_hash'][:10]}):\n{res}")
                except Exception as e:
                    print("Send error:", e)
            cur.execute("DELETE FROM commands WHERE id=?", (cid,))
            conn.commit()
        conn.close()
        time.sleep(3)

# ---------- –ó–ê–ü–£–°–ö ----------
def run_flask(): app.run(host="0.0.0.0", port=API_PORT)
def run_bot(): bot.infinity_polling()

if __name__ == "__main__":
    init_db()
    threading.Thread(target=run_flask, daemon=True).start()
    threading.Thread(target=poll_results, daemon=True).start()
    print("‚úÖ Server started on port", API_PORT)
    run_bot()
